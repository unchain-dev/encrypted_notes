type DeviceAlias = text;
type PublicKey = text;
type EncryptedSymmetricKey = text;

type EncryptedNote = record {
  "id" : nat;
  "data" : text;
};

type DeviceError = variant {
  AlreadyRegistered;
  DeviceNotRegistered;
  KeyNotSynchronized;
  UnknownPublicKey;
};

type RegisterKeyResult = variant {
  Ok;
  Err : DeviceError;
};

type SynchronizeKeyResult = variant {
  Ok : EncryptedSymmetricKey;
  Err : DeviceError;
};

service : {
  "deleteDevice" : (DeviceAlias) -> ();
  "getDeviceAliases" : () -> (vec DeviceAlias) query;
  "getEncryptedSymmetricKey" : (PublicKey) -> (SynchronizeKeyResult) query;
  "getUnsyncedPublicKeys" : () -> (vec PublicKey) query;
  "isEncryptedSymmetricKeyRegistered" : () -> (bool) query;
  "registerDevice" : (DeviceAlias, PublicKey) -> ();
  "registerEncryptedSymmetricKey" : (PublicKey, EncryptedSymmetricKey) -> (RegisterKeyResult);
  "uploadEncryptedSymmetricKeys" : (vec record { PublicKey; EncryptedSymmetricKey }) -> (RegisterKeyResult);
  "addNote" : (text) -> ();
  "deleteNote" : (nat) -> ();
  "getNotes" : () -> (vec EncryptedNote) query;
  "updateNote" : (EncryptedNote) -> ();
};
